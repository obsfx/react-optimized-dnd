This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/
  index.ts
  ReactOptimizedDndContext.tsx
  types.ts
  useDraggable.ts
  useDroppable.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/index.ts">
export * from './ReactOptimizedDndContext';
export * from './useDraggable';
export * from './useDroppable';
export * from './types';
</file>

<file path="src/ReactOptimizedDndContext.tsx">
import { createContext, useContext, useRef } from 'react';
import type { ReactNode, RefObject } from 'react';
import type {
  IDroppableItem,
  IReactOptimizedDndContextState,
  IReactOptimizedDndComponentState,
} from './types';

const ReactOptimizedDndContext = createContext<IReactOptimizedDndContextState | null>(null);

export function useReactOptimizedDndContext() {
  const context = useContext(ReactOptimizedDndContext);
  if (!context) {
    throw new Error('useReactOptimizedDndContext must be used within a ReactOptimizedDndProvider');
  }
  return context;
}

function ReactOptimizedDndProvider({
  children,
  onDragStart,
  onDragEnd,
  onDragOver,
}: {
  children: ReactNode;
  onDragStart?: (state: IReactOptimizedDndComponentState) => void;
  onDragEnd?: (state: IReactOptimizedDndComponentState) => void;
  onDragOver?: (state: IReactOptimizedDndComponentState) => void;
}) {
  const draggingElementRef = useRef<HTMLElement>(null);
  const droppableElementRefsPool = useRef<Record<string, IDroppableItem>>({});

  const stateRef = useRef<IReactOptimizedDndComponentState>({
    draggingElement: {
      ref: null,
      data: null,
    },
    overElement: {
      ref: null,
      data: null,
    },
  });

  const loop = () => {
    if (!draggingElementRef.current) return;
    const draggingRect = draggingElementRef.current.getBoundingClientRect();
    let intersectingDroppableItem: IDroppableItem | null = null;
    let latestDeltaDistance = Infinity;

    const keys = Object.keys(droppableElementRefsPool.current);
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      const droppableRef = droppableElementRefsPool.current[key];
      const isOver = droppableRef.isOver;

      if (!droppableRef.ref.current) continue;

      const droppableRect = droppableRef.ref.current.getBoundingClientRect();
      const isIntersecting =
        draggingRect.x < droppableRect.x + droppableRect.width &&
        draggingRect.x + draggingRect.width > droppableRect.x &&
        draggingRect.y < droppableRect.y + droppableRect.height &&
        draggingRect.y + draggingRect.height > droppableRect.y;

      const deltaX = draggingRect.x - droppableRect.x;
      const deltaY = draggingRect.y - droppableRect.y;
      const deltaDistance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

      if (deltaDistance < latestDeltaDistance && isIntersecting) {
        latestDeltaDistance = deltaDistance;
        intersectingDroppableItem = droppableRef;
      }

      if (isOver) {
        droppableRef.subscriber({ isOver: false });
        droppableElementRefsPool.current[key].isOver = false;
      }
    }

    if (intersectingDroppableItem && !intersectingDroppableItem.isOver) {
      intersectingDroppableItem.subscriber({ isOver: true });
      intersectingDroppableItem.isOver = true;

      stateRef.current.overElement.ref = intersectingDroppableItem.ref;
      stateRef.current.overElement.data = intersectingDroppableItem.data;

      onDragOver?.(stateRef.current);
    }

    requestAnimationFrame(loop);
  };

  const setDraggingElement = (ref: RefObject<HTMLElement> | null, draggableElementData: any) => {
    if (!ref) {
      if (draggingElementRef.current) {
        draggingElementRef.current = null;

        for (const key in droppableElementRefsPool.current) {
          droppableElementRefsPool.current[key].subscriber({ isOver: false });
          droppableElementRefsPool.current[key].isOver = false;
        }

        onDragEnd?.(stateRef.current);

        stateRef.current.draggingElement.ref = null;
        stateRef.current.draggingElement.data = null;
        stateRef.current.overElement.ref = null;
        stateRef.current.overElement.data = null;
      }
    } else {
      draggingElementRef.current = ref.current;

      stateRef.current.draggingElement.ref = ref;
      stateRef.current.draggingElement.data = draggableElementData;

      onDragStart?.(stateRef.current);
      requestAnimationFrame(loop);
    }
  };

  return (
    <ReactOptimizedDndContext.Provider
      value={{
        draggingElementRef,
        droppableElementRefsPool,
        setDraggingElement,
      }}
    >
      {children}
    </ReactOptimizedDndContext.Provider>
  );
}

export { ReactOptimizedDndContext, ReactOptimizedDndProvider };
</file>

<file path="src/types.ts">
export interface IDroppableItem {
  ref: React.RefObject<HTMLElement>;
  subscriber: (data: any) => void;
  isOver?: boolean;
  data?: any;
}

export interface IReactOptimizedDndContextState {
  draggingElementRef: React.RefObject<HTMLElement | null>;
  setDraggingElement: (
    ref: React.RefObject<HTMLElement> | null,
    draggableElementData: any
  ) => void;
  droppableElementRefsPool: React.RefObject<Record<string, IDroppableItem>>;
}

export interface IReactOptimizedDndComponentState {
  draggingElement: {
    ref: React.RefObject<HTMLElement> | null;
    data: any;
  };
  overElement: {
    ref: React.RefObject<HTMLElement> | null;
    data: any;
  };
}

export interface UseDraggableProps {
  data?: any;
  dragThreshold?: number;
}

export interface UseDroppableProps {
  data?: any;
}
</file>

<file path="src/useDraggable.ts">
import type { RefObject } from "react";
import { useEffect, useRef, useState } from "react";
import { useReactOptimizedDndContext } from "./ReactOptimizedDndContext";
import type { UseDraggableProps } from "./types";

const DRAG_THRESHOLD = 3;

export function useDraggable(props?: UseDraggableProps) {
  const { data, dragThreshold = DRAG_THRESHOLD } = props || {};

  const { draggingElementRef, setDraggingElement } = useReactOptimizedDndContext();

  const handle = useRef<any>(null);
  const handleState = useRef({
    mouseOver: false,
    mouseDown: false,
    dragging: false,
    holdStartedX: 0,
    holdStartedY: 0,
    holdStartedScrollX: 0,
    holdStartedScrollY: 0,
  });


  const posState = useRef({
    deltaScrollX: 0,
    deltaScrollY: 0,
    deltaMouseX: 0,
    deltaMouseY: 0,
  });

  const [isDragging, setIsDragging] = useState(false);
  const isMounted = useRef(false);

  useEffect(() => {
    if (!isMounted.current) {
      isMounted.current = true;
      return;
    }

    if (!isDragging) {
      setDraggingElement(null, null);
    } else {
      setDraggingElement(handle as RefObject<HTMLElement>, data);
    }
  }, [isDragging]);

  const [deltaPos, setDeltaPos] = useState({ x: 0, y: 0 });

  useEffect(() => {
    if (!handle.current) return;

    const onMouseEnter = () => {
      handleState.current.mouseOver = true;
    };

    const onMouseLeave = () => {
      handleState.current.mouseOver = false;
    };

    const onMouseDown = (event: MouseEvent) => {
      handleState.current.mouseDown = true;
      handleState.current.holdStartedX = event.clientX;
      handleState.current.holdStartedY = event.clientY;
      handleState.current.holdStartedScrollX = window.scrollX;
      handleState.current.holdStartedScrollY = window.scrollY;
    };

    const onMouseUp = () => {
      handleState.current.mouseDown = false;
      handleState.current.dragging = false;

      handleState.current.holdStartedX = 0;
      handleState.current.holdStartedY = 0;
      handleState.current.holdStartedScrollX = 0;
      handleState.current.holdStartedScrollY = 0;

      setIsDragging(false);
      setDeltaPos({ x: 0, y: 0 });
    };

    const onMouseMove = (event: MouseEvent) => {
      const deltaScrollX = window.scrollX - handleState.current.holdStartedScrollX;
      const deltaScrollY = window.scrollY - handleState.current.holdStartedScrollY;
      const deltaMouseX = event.clientX - handleState.current.holdStartedX;
      const deltaMouseY = event.clientY - handleState.current.holdStartedY;

      posState.current.deltaMouseX = deltaMouseX;
      posState.current.deltaMouseY = deltaMouseY;
      posState.current.deltaScrollX = deltaScrollX;
      posState.current.deltaScrollY = deltaScrollY;

      const deltaX = deltaMouseX + deltaScrollX;
      const deltaY = deltaMouseY + deltaScrollY;

      if (handleState.current.dragging) {
        setDeltaPos({ x: deltaX, y: deltaY });
        return;
      }

      if (
        !draggingElementRef.current &&
        (Math.abs(deltaX) > dragThreshold ||
          Math.abs(deltaY) > dragThreshold) &&
        handleState.current.mouseOver &&
        handleState.current.mouseDown
      ) {
        handleState.current.dragging = true;
        setIsDragging(true);
      }
    };

    const onScroll = () => {
      if (handleState.current.dragging) {
        posState.current.deltaScrollX = window.scrollX - handleState.current.holdStartedScrollX;
        posState.current.deltaScrollY = window.scrollY - handleState.current.holdStartedScrollY;

        const deltaX = posState.current.deltaMouseX + posState.current.deltaScrollX;
        const deltaY = posState.current.deltaMouseY + posState.current.deltaScrollY;

        setDeltaPos({ x: deltaX, y: deltaY });
      }
    };

    // Touch events for mobile support
    const onTouchStart = (event: TouchEvent) => {
      if (!event.touches || event.touches.length !== 1) return;
      const touch = event.touches[0];
      handleState.current.mouseDown = true;
      handleState.current.mouseOver = true; // treat as over
      handleState.current.holdStartedX = touch.clientX;
      handleState.current.holdStartedY = touch.clientY;
      handleState.current.holdStartedScrollX = window.scrollX;
      handleState.current.holdStartedScrollY = window.scrollY;
    };

    const onTouchEnd = () => {
      handleState.current.mouseDown = false;
      handleState.current.dragging = false;
      handleState.current.mouseOver = false;
      handleState.current.holdStartedX = 0;
      handleState.current.holdStartedY = 0;
      handleState.current.holdStartedScrollX = 0;
      handleState.current.holdStartedScrollY = 0;
      setIsDragging(false);
      setDeltaPos({ x: 0, y: 0 });
    };

    const onTouchMove = (event: TouchEvent) => {
      if (!event.touches || event.touches.length !== 1) return;
      const touch = event.touches[0];
      const deltaScrollX = window.scrollX - handleState.current.holdStartedScrollX;
      const deltaScrollY = window.scrollY - handleState.current.holdStartedScrollY;
      const deltaMouseX = touch.clientX - handleState.current.holdStartedX;
      const deltaMouseY = touch.clientY - handleState.current.holdStartedY;

      posState.current.deltaMouseX = deltaMouseX;
      posState.current.deltaMouseY = deltaMouseY;
      posState.current.deltaScrollX = deltaScrollX;
      posState.current.deltaScrollY = deltaScrollY;

      const deltaX = deltaMouseX + deltaScrollX;
      const deltaY = deltaMouseY + deltaScrollY;

      if (handleState.current.dragging) {
        setDeltaPos({ x: deltaX, y: deltaY });
        event.preventDefault(); // prevent scrolling while dragging
        return;
      }

      if (
        !draggingElementRef.current &&
        (Math.abs(deltaX) > dragThreshold ||
          Math.abs(deltaY) > dragThreshold) &&
        handleState.current.mouseOver &&
        handleState.current.mouseDown
      ) {
        handleState.current.dragging = true;
        setIsDragging(true);
        event.preventDefault();
      }
    };

    handle.current?.addEventListener("mouseenter", onMouseEnter);
    handle.current?.addEventListener("mouseleave", onMouseLeave);
    document.addEventListener("mousedown", onMouseDown);
    document.addEventListener("mouseup", onMouseUp);
    document.addEventListener("mousemove", onMouseMove);
    document.addEventListener("scroll", onScroll);

    // Touch events
    handle.current?.addEventListener("touchstart", onTouchStart, { passive: false });
    document.addEventListener("touchend", onTouchEnd, { passive: false });
    document.addEventListener("touchmove", onTouchMove, { passive: false });

    return () => {
      handle.current?.removeEventListener("mouseenter", onMouseEnter);
      handle.current?.removeEventListener("mouseleave", onMouseLeave);
      document.removeEventListener("mousedown", onMouseDown);
      document.removeEventListener("mouseup", onMouseUp);
      document.removeEventListener("mousemove", onMouseMove);
      document.removeEventListener("scroll", onScroll);
      // Touch events
      handle.current?.removeEventListener("touchstart", onTouchStart);
      document.removeEventListener("touchend", onTouchEnd);
      document.removeEventListener("touchmove", onTouchMove);
    };
  }, [handle]);

  const handleRef = (node: any) => {
    handle.current = node;
  };

  return { handleRef, deltaPos, isDragging };
}
</file>

<file path="src/useDroppable.ts">
import { useIntersectionObserver } from "usehooks-ts";
import { useReactOptimizedDndContext } from "./ReactOptimizedDndContext";
import type { RefObject } from "react";
import { useEffect, useRef, useState } from "react";
import { v7 } from "uuid";
import type { UseDroppableProps } from "./types";

export function useDroppable(props?: UseDroppableProps) {
  const { data } = props || {};
  const { droppableElementRefsPool } = useReactOptimizedDndContext();

  const uuid = useRef(v7());
  const elementRef = useRef<HTMLElement>(null);
  const [isOver, setIsOver] = useState(false);

  const { isIntersecting, ref: intersectionObserverRef } =
    useIntersectionObserver({
      threshold: 0.01,
    });

  useEffect(() => {
    if (!elementRef.current) return;

    if (isIntersecting) {
      if (!droppableElementRefsPool.current[uuid.current]) {
        droppableElementRefsPool.current[uuid.current] = {
          ref: elementRef as RefObject<HTMLElement>,
          subscriber: (data: any) => {
            // handle the data
            setIsOver(data.isOver);
          },
          data: data || null,
        };
      }
    } else {
      if (droppableElementRefsPool.current[uuid.current]) {
        delete droppableElementRefsPool.current[uuid.current];
        setIsOver(false);
      }
    }
    // @eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isIntersecting]);

  const droppableRef = (node: any) => {
    elementRef.current = node;
    intersectionObserverRef(node);
  };

  return { droppableRef, isOver };
}
</file>

</files>
